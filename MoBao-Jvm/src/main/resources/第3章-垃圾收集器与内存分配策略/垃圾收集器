-Xmn10m 指定新生代的大小
-XX:+UseSerialGC
-XX:+UseParNewGC
-XX:+UseConcMarkSweepGC (-XX:+UseParNewGC+-XX:+UseSerialGC)
-XX:+UseParallelGC
-XX:+UseParallelOldGC
-XX:+UseG1GC


1:Serial(YoungGen)
2:ParNew(YoungGen)
是CMS默认的新生代收集器
3:Parallel Scavenge(YoungGen)
(1)吞吐量优先的收集器
(2)-XX:+UseAdaptiveSizePolicy自适应调节大小
4:Serial Old(OldGen)
(1)与Parallel Scavenge收集器搭配使用
(2)作为CMS收集器的后备预案,在并发收集发生Concurrent Mode Failure时使用
5:Parallel Old (OldGen)
吞吐量优先
6:CMS(Concurrent Mark Sweep) (OldGen)高吞吐
(1)CPU
(2)Floating Garbage浮动垃圾
  -XX:CMSInitiatingOccupancyFraction
(3)Mark-Sweep
-XX:+UseCMSCompactAtFullCollection
-XX:CMSFullGCsBeforeCompaction

7:G1(YoungGen,OldGen)

young gen
old gen
metaspace

ParallelScavenge和ParNew都是并行GC，主要是并行收集young gen，目的和性能其实都差不多。
最明显的区别有下面几点：
1、PS以前是广度优先顺序来遍历对象图的，JDK6的时候改为默认用深度优先顺序遍历，
并留有一个UseDepthFirstScavengeOrder参数来选择是用深度还是广度优先。在JDK6u18之后这个参数被去掉，
PS变为只用深度优先遍历。ParNew则是一直都只用广度优先顺序来遍历
2、PS完整实现了adaptive size policy，而ParNew及“分代式GC框架”内的其它GC都没有实现完
（倒不是不能实现，就是麻烦+没人力资源去做）。
所以千万千万别在用ParNew+CMS的组合下用UseAdaptiveSizePolicy，
请只在使用UseParallelGC或UseParallelOldGC的时候用它。
3、由于在“分代式GC框架”内，ParNew可以跟CMS搭配使用，而ParallelScavenge不能。
当时ParNew GC被从Exact VM移植到HotSpot VM的最大原因就是为了跟CMS搭配使用。
4、在PS成为主要的throughput GC之后，它还实现了针对NUMA的优化；
而ParNew一直没有得到NUMA优化的实现。